from __future__ import annotations

import abc
<<<<<<< HEAD
<<<<<<< HEAD
<<<<<<< HEAD
<<<<<<< HEAD
from typing import Optional
=======
from typing import TYPE_CHECKING, Optional
>>>>>>> ec9d79f070b8f6780957c47a12c2e943725352df

from pip._internal.index.package_finder import PackageFinder
from pip._internal.metadata.base import BaseDistribution
from pip._internal.req import InstallRequirement

<<<<<<< HEAD
=======
=======
from typing import TYPE_CHECKING, Optional
=======
>>>>>>> 667482d8b430caa0727488b1d1900471cb8d5208
=======
from typing import TYPE_CHECKING
>>>>>>> c67f90bd6d99f24b568e213ed27f14d7420ce66d

from pip._internal.metadata.base import BaseDistribution
from pip._internal.req import InstallRequirement

<<<<<<< HEAD
<<<<<<< HEAD
>>>>>>> eee7fef9826be073fc05b85970f3b8ccb52f4c9e
if TYPE_CHECKING:
=======
from pip._internal.utils.typing import MYPY_CHECK_RUNNING

if MYPY_CHECK_RUNNING:
    from typing import Optional

    from pip._vendor.pkg_resources import Distribution
    from pip._internal.req import InstallRequirement
>>>>>>> 667482d8b430caa0727488b1d1900471cb8d5208
    from pip._internal.index.package_finder import PackageFinder
=======
if TYPE_CHECKING:
    from pip._internal.build_env import BuildEnvironmentInstaller
>>>>>>> c67f90bd6d99f24b568e213ed27f14d7420ce66d
=======
from typing import TYPE_CHECKING

from pip._internal.metadata.base import BaseDistribution
from pip._internal.req import InstallRequirement

if TYPE_CHECKING:
    from pip._internal.build_env import BuildEnvironmentInstaller
>>>>>>> c386aa5fe352f969882abba769ec53b58b48337b

>>>>>>> ec9d79f070b8f6780957c47a12c2e943725352df

class AbstractDistribution(metaclass=abc.ABCMeta):
    """A base class for handling installable artifacts.

    The requirements for anything installable are as follows:

     - we must be able to determine the requirement name
       (or we can't correctly handle the non-upgrade case).

     - for packages with setup requirements, we must also be able
       to determine their requirements without installing additional
       packages (for the same reason as run-time dependencies)

     - we must be able to create a Distribution object exposing the
       above metadata.

     - if we need to do work in the build tracker, we must be able to generate a unique
       string to identify the requirement in the build tracker.
    """

    def __init__(self, req: InstallRequirement) -> None:
        super().__init__()
        self.req = req

<<<<<<< HEAD
<<<<<<< HEAD
<<<<<<< HEAD
    @abc.abstractproperty
    def build_tracker_id(self) -> Optional[str]:
=======
    @abc.abstractproperty
    def build_tracker_id(self) -> str | None:
>>>>>>> c67f90bd6d99f24b568e213ed27f14d7420ce66d
=======
    @abc.abstractproperty
    def build_tracker_id(self) -> str | None:
>>>>>>> c386aa5fe352f969882abba769ec53b58b48337b
        """A string that uniquely identifies this requirement to the build tracker.

        If None, then this dist has no work to do in the build tracker, and
        ``.prepare_distribution_metadata()`` will not be called."""
<<<<<<< HEAD
<<<<<<< HEAD
        raise NotImplementedError()

    @abc.abstractmethod
    def get_metadata_distribution(self) -> BaseDistribution:
        raise NotImplementedError()

    @abc.abstractmethod
    def prepare_distribution_metadata(
        self,
<<<<<<< HEAD
        finder: PackageFinder,
=======
        finder: "PackageFinder",
>>>>>>> ec9d79f070b8f6780957c47a12c2e943725352df
        build_isolation: bool,
        check_build_deps: bool,
    ) -> None:
=======
    @abc.abstractmethod
    def get_pkg_resources_distribution(self):
        # type: () -> Optional[Distribution]
        raise NotImplementedError()

    @abc.abstractmethod
    def prepare_distribution_metadata(self, finder, build_isolation):
        # type: (PackageFinder, bool) -> None
>>>>>>> 667482d8b430caa0727488b1d1900471cb8d5208
=======
        raise NotImplementedError()

    @abc.abstractmethod
=======
        raise NotImplementedError()

    @abc.abstractmethod
>>>>>>> c386aa5fe352f969882abba769ec53b58b48337b
    def get_metadata_distribution(self) -> BaseDistribution:
        raise NotImplementedError()

    @abc.abstractmethod
    def prepare_distribution_metadata(
        self,
        build_env_installer: BuildEnvironmentInstaller,
        build_isolation: bool,
        check_build_deps: bool,
    ) -> None:
<<<<<<< HEAD
>>>>>>> c67f90bd6d99f24b568e213ed27f14d7420ce66d
=======
>>>>>>> c386aa5fe352f969882abba769ec53b58b48337b
        raise NotImplementedError()
