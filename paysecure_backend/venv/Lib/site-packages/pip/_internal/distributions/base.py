import abc
<<<<<<< HEAD
<<<<<<< HEAD
from typing import Optional
=======
from typing import TYPE_CHECKING, Optional
>>>>>>> ec9d79f070b8f6780957c47a12c2e943725352df

from pip._internal.index.package_finder import PackageFinder
from pip._internal.metadata.base import BaseDistribution
from pip._internal.req import InstallRequirement

<<<<<<< HEAD
=======
=======
from typing import TYPE_CHECKING, Optional
=======
>>>>>>> 667482d8b430caa0727488b1d1900471cb8d5208

from pip._vendor.six import add_metaclass

<<<<<<< HEAD
>>>>>>> eee7fef9826be073fc05b85970f3b8ccb52f4c9e
if TYPE_CHECKING:
=======
from pip._internal.utils.typing import MYPY_CHECK_RUNNING

if MYPY_CHECK_RUNNING:
    from typing import Optional

    from pip._vendor.pkg_resources import Distribution
    from pip._internal.req import InstallRequirement
>>>>>>> 667482d8b430caa0727488b1d1900471cb8d5208
    from pip._internal.index.package_finder import PackageFinder

>>>>>>> ec9d79f070b8f6780957c47a12c2e943725352df

@add_metaclass(abc.ABCMeta)
class AbstractDistribution(object):
    """A base class for handling installable artifacts.

    The requirements for anything installable are as follows:

     - we must be able to determine the requirement name
       (or we can't correctly handle the non-upgrade case).

     - for packages with setup requirements, we must also be able
       to determine their requirements without installing additional
       packages (for the same reason as run-time dependencies)

     - we must be able to create a Distribution object exposing the
       above metadata.
    """

    def __init__(self, req):
        # type: (InstallRequirement) -> None
        super(AbstractDistribution, self).__init__()
        self.req = req

<<<<<<< HEAD
    @abc.abstractproperty
    def build_tracker_id(self) -> Optional[str]:
        """A string that uniquely identifies this requirement to the build tracker.

        If None, then this dist has no work to do in the build tracker, and
        ``.prepare_distribution_metadata()`` will not be called."""
        raise NotImplementedError()

    @abc.abstractmethod
    def get_metadata_distribution(self) -> BaseDistribution:
        raise NotImplementedError()

    @abc.abstractmethod
    def prepare_distribution_metadata(
        self,
<<<<<<< HEAD
        finder: PackageFinder,
=======
        finder: "PackageFinder",
>>>>>>> ec9d79f070b8f6780957c47a12c2e943725352df
        build_isolation: bool,
        check_build_deps: bool,
    ) -> None:
=======
    @abc.abstractmethod
    def get_pkg_resources_distribution(self):
        # type: () -> Optional[Distribution]
        raise NotImplementedError()

    @abc.abstractmethod
    def prepare_distribution_metadata(self, finder, build_isolation):
        # type: (PackageFinder, bool) -> None
>>>>>>> 667482d8b430caa0727488b1d1900471cb8d5208
        raise NotImplementedError()
