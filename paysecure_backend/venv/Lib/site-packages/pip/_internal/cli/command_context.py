<<<<<<< HEAD
<<<<<<< HEAD
<<<<<<< HEAD
from contextlib import ExitStack, contextmanager
from typing import ContextManager, Generator, TypeVar
=======
from contextlib import contextmanager
>>>>>>> 667482d8b430caa0727488b1d1900471cb8d5208
=======
from collections.abc import Generator
from contextlib import AbstractContextManager, ExitStack, contextmanager
from typing import TypeVar
>>>>>>> c67f90bd6d99f24b568e213ed27f14d7420ce66d
=======
from collections.abc import Generator
from contextlib import AbstractContextManager, ExitStack, contextmanager
from typing import TypeVar
>>>>>>> c386aa5fe352f969882abba769ec53b58b48337b

_T = TypeVar("_T", covariant=True)


class CommandContextMixIn:
    def __init__(self) -> None:
        super().__init__()
        self._in_main_context = False
        self._main_context = ExitStack()

    @contextmanager
    def main_context(self) -> Generator[None, None, None]:
        assert not self._in_main_context

        self._in_main_context = True
        try:
            with self._main_context:
                yield
        finally:
            self._in_main_context = False

<<<<<<< HEAD
<<<<<<< HEAD
<<<<<<< HEAD
    def enter_context(self, context_provider: ContextManager[_T]) -> _T:
=======
    def enter_context(self, context_provider):
        # type: (ContextManager[_T]) -> _T
>>>>>>> 667482d8b430caa0727488b1d1900471cb8d5208
=======
    def enter_context(self, context_provider: AbstractContextManager[_T]) -> _T:
>>>>>>> c67f90bd6d99f24b568e213ed27f14d7420ce66d
=======
    def enter_context(self, context_provider: AbstractContextManager[_T]) -> _T:
>>>>>>> c386aa5fe352f969882abba769ec53b58b48337b
        assert self._in_main_context

        return self._main_context.enter_context(context_provider)
